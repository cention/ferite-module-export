uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";
uses "workflow";
uses "MailUtilities";
uses "cmail";
uses "dbi";
uses "reflection";

/*
 * TODO:
 *   Generate SQL to fetch the data from the database - mostly done just need to implement email and word list checks
 *   Implement disk space unique row checking - this will probably have to be some sort of disk-base btree structure 
 */

global {
	boolean logToConsole = true;
	boolean logToFile = true;
	string logFile = '/cention/logs/Exports.log';
	object logFileObject;
	object logClosure;
}

/**
 * @function log
 * @declaration function log( string text )
 * @brief Logs a string of text either to the console or to a file
 * @param string text the text to log
 */
function log( object export, string text ) {
	text = '[' + formatDateTime(Date.now()) + '] {' + (export ? export.name : 'Exports Backend') + '} ' + text;

	if( logToConsole )
		Console.println( text );
	
	if( logToFile ) {
		if( not logFileObject ) {
			if( not Posix.stat(logFile) ) {
				Posix.umask(0);
				logFileObject = File.create( logFile, 0644);
				logFileObject = File.open( logFile, FileSystem.O_RDWR );
			} else {
				logFileObject = File.open( logFile, FileSystem.O_RDWR );
			}
			if( not logFileObject ) {
				raise new Error("Unable to open log file $logFile. Please check permissions");
			} else {
				logFileObject.seek( logFileObject.length(), Stream.SEEK_SET );
				logFileObject.println("---------------------------------------");
			}
		}
		logFileObject.println( text );
	}
	
	if( logClosure ) {
		logClosure.invoke(text);
	}
}

namespace Exports {
	
	string exportPath = '';

	class ExportResult {
		number errand_id;
		string from_address;
		string to_address;
		string subject;
		string question;
		string answer;

		string original_subject;
		string original_question;
		string original_answer;

		string timestamp_arrived;
		string timestamp_opened;
		string timestamp_answered;
		string timestamp_closed;
		number agent_id;
		string agent_name;
		number area_id;
		string area_name;
		number client_id;
		string priority;
		string tag_names;
		string channel;
		number satisfaction_meter_answer_1;
		number satisfaction_meter_answer_2;
		number satisfaction_meter_answer_3;
		number satisfaction_meter_answer_4;
		number satisfaction_meter_answer_5;

		number _internal_timestamp_arrived;
		number _internal_timestamp_opened;
		number _internal_timestamp_answered;
		number _internal_timestamp_closed;

		string _internal_from_address;
		string _internal_errand_text;
		string _internal_answer_text;
		
		constructor( object export ) {
			/* Tobias 2012-11-06: Since one tag per column only works when there
			 * is a few tags in the system I'm disabling it until it can be fixed.
			object thisObject = new Object(self);
			array addedTags = [];
			export.getAvailableAreaTags().each() using ( tag ) {
				string safe_name = Regexp.replaceAll('[^A-z0-9]', tag.display, '_').toLower();
				if( not addedTags.keyExists(safe_name) ) {
					thisObject.setVariable('tag_' + safe_name, '');
					addedTags[safe_name] = true;
				}
			}; */
		}
		
		function toArray( object format, object export ) {
			array values = [];

			string theDate;
			string timeZoneName;
			object timeZoneObj;
			if(export.timeZoneId > 0){
				timeZoneObj = Workflow.TimeZone.load(export.timeZoneId);
			}
			if(timeZoneObj){
				timeZoneName = timeZoneObj.zoneName;
			}
			else{
				timeZoneName = Workflow.getSystemTimeZoneName();
			}
			theDate = formatDateTimeTZ(._internal_timestamp_arrived, timeZoneName);
			if( format.errandId ) values['errand_id'] = .errand_id;
			if( format.fromAddress ) values['from_address'] = .from_address;
			if( format.toAddress ) values['to_address'] = .to_address;
			if( format.subject ) values['subject'] = (.subject ? .subject : .original_subject);
			if( format.question ) values['question'] = (.question ? .question : .original_question);
			if( format.answer ) values['answer'] = (.answer ? .answer : .original_answer);
			if( format.arrived ) values['timestamp_arrived'] = (._internal_timestamp_arrived ? formatDateTimeTZ(._internal_timestamp_arrived, timeZoneName) : .timestamp_arrived);
			if( format.opened ) values['timestamp_opened'] = (._internal_timestamp_opened ? formatDateTimeTZ(._internal_timestamp_opened, timeZoneName) : .timestamp_opened);
			if( format.answered ) values['timestamp_answered'] = (._internal_timestamp_answered ? formatDateTimeTZ(._internal_timestamp_answered, timeZoneName) : .timestamp_answered);
			if( format.closed ) values['timestamp_closed'] = (._internal_timestamp_closed ? formatDateTimeTZ(._internal_timestamp_closed, timeZoneName) : .timestamp_closed);
			if( format.agentid ) values['agent_id'] = .agent_id;
			if( format.agentname ) values['agent_name'] = .agent_name;
			if( format.areaid ) values['area_id'] = .area_id;
			if( format.areaname ) values['area_name'] = .area_name;
			if( format.clientid ) values['client_id'] = .client_id;
			if( format.priority ) values['priority'] = .priority;
			if( format.tags ) values['tag_names'] = .tag_names;
			if( format.channel ) values['channel'] = .channel;
			if( format.feedback ) {
				values['satisfaction_meter_answer_1'] = .satisfaction_meter_answer_1;
				values['satisfaction_meter_answer_2'] = .satisfaction_meter_answer_2;
				values['satisfaction_meter_answer_3'] = .satisfaction_meter_answer_3;
				values['satisfaction_meter_answer_4'] = .satisfaction_meter_answer_4;
				values['satisfaction_meter_answer_5'] = .satisfaction_meter_answer_5;
			}
			
			/* Tobias 2012-11-06: Since one tag per column only works when there
			 * is a few tags in the system I'm disabling it until it can be fixed.
			if( format.tags ) {
				if( export ) {
					object thisObject = new Object(self);
					export.getAvailableAreaTags().each() using ( tag ) {
						string safe_name = 'tag_' + Regexp.replaceAll('[^A-z0-9]', tag.display, '_').toLower();
						if( not values.keyExists(safe_name) ) {
							values[safe_name] = thisObject.getVariable(safe_name);
						}
					};
				}
			} */

			return values;
		}
		function toJSONForFormat( object format, object export ) {
			array objectValues = [];
			array values = .toArray(format, export);
			values.eachWithIndex() using ( _value, index ) {
				string key = JSON.escape(values.getName(index));
				string value = JSON.valueToJSON(_value);
				objectValues[] = "\"$key\":$value";
			};
			return "{" + objectValues.join(',') + "}";
		}
		function toOrder( object format, object export ) {
			array order = [];
			array values = .toArray(format, export);
			values.eachWithIndex() using ( _value, index ) {
				order[] = values.getName(index);
			};
			return order;
		}
	}

	abstract class DataWriter {
		static function createForExport( object export ) {
			switch( export.type ) {
				case Workflow.Export.TYPE_EXCEL:
					return new Exports.ExcelDataWriter(export);
				case Workflow.Export.TYPE_CSV:
					return new Exports.CSVDataWriter(export);
				case Workflow.Export.TYPE_XML:
					return new Exports.XMLDataWriter(export);
				case Workflow.Export.TYPE_JSON:
					return new Exports.JSONDataWriter(export);
			}
			return null;
		}
		
		object  export;
		object  outputStream;
		number  recordedCount;
		number  duplicateCount;
		string  tag;

		boolean useMemoryHashCache = true;
		array   memoryHashCache;
		number  memoryHashCacheSwitchLimit = 256000;
		
		constructor( object export ) {
			.export = export;
		}
		function formatDate( number date ) {
			number localDate = date + (Config.TimeZoneOffset * 60);
			return Date.localDate(localDate).format('%Y%m%d');
		}
		function setupPathForExport {
			string path = Exports.exportPath + Regexp.replaceAll(' ', .export.name, '-');
			Directory.build(path);
			return path;
		}
		function setTag( string tag ) {
			.tag = tag;
		}
		
		string stub;
		function filenameStub {
			object timeZoneObj;
			string timeZoneName;
			if(.export){
				if(.export.timeZoneId > 0) {
					timeZoneObj = Workflow.TimeZone.load(.export.timeZoneId);
				}
			}
			if(timeZoneObj){
				timeZoneName = timeZoneObj.zoneName;
			}
			else{
				timeZoneName = Workflow.TimeZone.getSystemTimeZoneName();
			}
			if( not .stub ) {
				.stub = .setupPathForExport() + "/${Regexp.replaceAll(' ', .export.name, '-')}_${formatDateTZ(.export.start, timeZoneName, '%Y%m%d')}_to_${formatDateTZ(.export.finish, timeZoneName, '%Y%m%d')}_${.tag}";
			}
			return .stub;
		}
		function start {
			string path = .filenameStub() + ".intermediate.json";

			File.remove(path);
			.outputStream = File.create( path, 0644);
			.outputStream = null;

			.recordedCount = 0;
			.duplicateCount = 0;
			
			log( .export, "Starting export writing intermediate data to $path");
		}
		function hasSeenHash( string _hash ) {
			string hash = ":$_hash;";
			if( .useMemoryHashCache ) {
				if( .memoryHashCache.keyExists(hash) ) {
					return true;
				}
				.memoryHashCache[hash] = true;
				if( .memoryHashCache.size() > .memoryHashCacheSwitchLimit ) {
					raise new Error("Hard memory hash limit hit - implement file based lookup of uniqueness");
				}
				return false;
			} else {
				raise new Error("Implement file based lookup of uniqueness");
			}
		}
		function record( array list ) {
			string path = .filenameStub() + ".intermediate.json";
			boolean checkingErrandContents = (.export.getPositiveSearchTerms() or .export.getNegativeSearchTerms() ? true : false);
			boolean checkingFromAddress = (.export.getPositiveEmailLists() or .export.getNegativeEmailLists() ? true : false);

			array positiveSearchTerms = .export.getPositiveSearchTerms();
			array negativeSearchTerms = .export.getNegativeSearchTerms();
			array positiveEmailLists = .export.getPositiveEmailLists();
			array negativeEmailLists = .export.getNegativeEmailLists();

			.outputStream = File.open( path, FileSystem.O_RDWR );
			.outputStream.seek( .outputStream.length(), Stream.SEEK_SET );
			list.each() using ( row ) {
				boolean shouldRecord = true;
				
				if( checkingErrandContents ) {
					boolean contentGreenLight = (positiveSearchTerms ? false : true);
					
					positiveSearchTerms.each() using ( term ) {
						if( (row._internal_errand_text.index(term) >= 0) or (row._internal_answer_text.index(term) >= 0) ) {
							contentGreenLight = true;
							return false;
						}
					};
					negativeSearchTerms.each() using ( term ) {
						if( (row._internal_errand_text.index(term) >= 0) or (row._internal_answer_text.index(term) >= 0) ) {
							contentGreenLight = false;
							return false;
						}
					};
					shouldRecord = contentGreenLight;
				}

				if( checkingFromAddress and shouldRecord ) {
					boolean emailGreenLight = (positiveEmailLists ? false : true);
					
					positiveEmailLists.each() using ( email ) {
						string address = (row.from_address ? row.from_address : row._internal_from_address);
						if( address.index(email) >= 0 ) {
							emailGreenLight = true;
							return false;
						}
					};
					negativeEmailLists.each() using ( email ) {
						string address = (row.from_address ? row.from_address : row._internal_from_address);
						if( address.index(email) >= 0 ) {
							emailGreenLight = false;
							return false;
						}
					};
					
					shouldRecord = emailGreenLight;
				}

				if( shouldRecord ) {
					.record(row);
				} else {
					.duplicateCount++;
				}
			};
			.outputStream.flush();
			.outputStream.close();
			.outputStream = null;
			return (list.size() >  0);
		}
		function record( object row ) {
			string json = row.toJSONForFormat(.export.exportFormat, .export);
			string md5 = String.base64encode(MHash.hashString(json, MHash.SHA256));
		
			if( not .hasSeenHash(md5) ) {
				.outputStream.writeln(json);
				.recordedCount++;
				if( (.recordedCount % 1000) == 0 ) {
					log( .export, "Recorded a total of ${.recordedCount} rows.");
				}
			} else {
				.duplicateCount++;
				if( (.duplicateCount % 1000) == 0 ) {
					log( .export, "Ignored a total of ${.duplicateCount} rows.");
				}
			}
		}
		function iterateIntermediateFile( object actual_export, object generated_export ) {
			return .iterateIntermediateFile( actual_export, generated_export, true, null ) using recipient();
		}
		function iterateIntermediateFile( object actual_export, object generated_export, boolean complex, object continuance ) {
			string path = .filenameStub() + ".intermediate.json";
			object stream = (continuance ? continuance : File.open(path));
			object handler = new Exports.ExportResult(actual_export);
			number progress = 0;
			
			while( not stream.eos() ) {
				string line = stream.readln().trim(" \r\n");
				number real_progress = 0;
				
				progress++;
				real_progress = ((progress / (.recordedCount + 1.0)) * 50).round() + 50;
				.export.updateProgress( generated_export, real_progress );
				
				if( complex ) {
					if( line ) {
						handler = JSON.parse(line, handler);
						if( deliver(handler) ) {
							break;
						}
					}
				} else {
					if( deliver(line) ) {
						break;
					}
				}
			}
			
			return stream;
		}
		function finishFiles {
			return  [ "- NO FILE TO FINISH -" ];
		}
		function finish {
			if( .outputStream ) {
				.outputStream.flush();
				.outputStream.close();
				.outputStream = null;
			}
		}
	}
	
	class ExcelDataWriter extends DataWriter { 
		number tippingPoint = 20000;

		function finishFiles {
			number totalLeft = .recordedCount;
			
			if( totalLeft < .tippingPoint ) {
				return [ .filenameStub() + ".xls" ];
			} else {
				array list = [];
				while( totalLeft >= .tippingPoint or totalLeft > 0 ) {
					list[] = .filenameStub() + '.part-' + (list.size() + 1) + '.xls';
					totalLeft -= .tippingPoint;
				}
				return list;
			}
		}
		
		function finish( object actual_export, object generated_export ) {
			object output = null;
			array paths = .finishFiles();
			boolean writtenHeader = false;
			array header = [];
			object stream = null;
			
			super.finish();

			paths.each() using ( path ) {
				number count = 0;
				
				File.remove(path);
				output = File.create( path, 0644);
				output = File.open( path, FileSystem.O_RDWR );
				output.writeln('<html>');
				output.writeln('<head><meta http-equiv="CONTENT-Type" content="text/html; charset=UTF-8"></head>');
				output.writeln('<body>');
				output.writeln('<table>');

				stream = .iterateIntermediateFile( actual_export, generated_export, true, stream ) using ( row ) {
					array values = row.toArray(.export.exportFormat, .export);
					array xml_tags = [];

					values.eachWithIndex() using ( value, index ) {
						string name = values.getName(index);
						if( not writtenHeader ) {
							header[] = name;
						}
						if( value isa string ) {
							xml_tags[] = "\t\t<td>${EscapeHTML(value)}</td>";
						} else {
							xml_tags[] = "\t\t<td>$value</td>";
						}
					};
				
					if( not writtenHeader ) {
						output.writeln("\t<tr>");
						output.writeln(header.join("\n") using ( key ) {
							return "<td>$key</td>";
						});
						output.writeln("\t</tr>");
						writtenHeader = true;
					}

					output.writeln("\t<tr>");
					output.writeln(xml_tags.join("\n"));
					output.writeln("\t</tr>");
					
					count++;
					if( count >= .tippingPoint ) {
						count = 0;
						return true;
					}
				};

				output.writeln("</table>");
				output.writeln("</body>");
				output.writeln("</html>");
				output.flush();
				output.close();
			};
		}
	}
	class CSVDataWriter extends DataWriter { 
		function finishFiles
			return [ .filenameStub() + ".csv" ];
		function finish( object actual_export, object generated_export ) {
			object output = null;
			string path = .filenameStub() + '.csv';
			
			super.finish();
			
			File.remove(path);
			output = File.create( path, 0644);
			output = File.open( path, FileSystem.O_RDWR );

			.iterateIntermediateFile(actual_export, generated_export) using ( row ) {
				output.writeln(row.toArray(.export.exportFormat, .export).join(',') using ( value ){
					if( value isa string ) {
						string real_value = value;
						real_value = Regexp.replaceAll("\n", real_value, "\\n");
						real_value = Regexp.replaceAll("\r", real_value, "\\r");
						real_value = Regexp.replaceAll("\"", real_value, "\\\"");
						return "\"$real_value\"";
					} else {
						return "$value";
					}
				});
			};

			output.flush();
			output.close();
		}
	}
	class XMLDataWriter extends DataWriter { 
		function finishFiles
			return [ .filenameStub() + ".xml" ];
		function finish( object actual_export, object generated_export ) {
			object output = null;
			string path = .filenameStub() + '.xml';

			super.finish();

			File.remove(path);
			output = File.create( path, 0644);
			output = File.open( path, FileSystem.O_RDWR );
			output.writeln("<?xml version=\"1.0\" ?>");
			output.writeln("<export>");

			.iterateIntermediateFile(actual_export, generated_export) using ( row ) {
				array values = row.toArray(.export.exportFormat, .export);
				array xml_tags = [];
				
				values.map() using ( key, value ) {
					if( value isa string ) {
						xml_tags[] = "\t\t<$key>${EscapeHTML(value)}</$key>";
					} else {
						xml_tags[] = "\t\t<$key>$value</$key>";
					}
				};
				output.writeln("\t<record>");
				output.writeln(xml_tags.join("\n"));
				output.writeln("\t</record>");
			};

			output.writeln("</export>");
			output.flush();
			output.close();
		}
	}
	class JSONDataWriter extends DataWriter { 
		function finishFiles
			return  [ .filenameStub() + ".json" ];
		function finish( object actual_export, object generated_export ) {
			object output = null;
			string path = .filenameStub() + '.json';
			string pendingComma = '';

			super.finish();

			File.remove(path);
			output = File.create( path, 0644);
			output = File.open( path, FileSystem.O_RDWR );
			output.writeln("[");

			.iterateIntermediateFile(actual_export, generated_export, false, null) using ( row ) {
				if( pendingComma ) {
					output.writeln(pendingComma);
				}
				output.write(row);
				pendingComma = ',';
			};
			
			output.writeln("]");
			output.flush();
			output.close();
		}
	}

	function setup {
		.exportPath = (Config.CachePath - 'Cache/') + 'Exports/';
		Directory.build(.exportPath);
	}

	function createMessage( object export, array exportedFiles ) {
		object message = null;
		
		if( export.emailflag ) {
			string body;
			string fileURL;
			string fileName;
			string cmdLine;
			array pathArr;
			string domainAddress;

			object text = new Mail.MessagePart();
			message = new Mail.Message();
			message.header = new Mail.MessageHeader();
			message.header.from.add( new Mail.Address(export.optionalAddress) );
			message.header.to.add( new Mail.Address(export.optionalAddress) );
			
			if( String.length(export.emailHeader) > 0 ){
				message.header.subject = export.emailHeader;
			}
			else{
				message.header.subject = I('Export {0:name} Completed').expand(export.name);
			}
			message.header.date = Date.localDate(Date.now()).format( '%a, %d %b %Y %H:%M:%S %z' );

			message = MailUtilities.setOutgoingHeader(message,export.optionalAddress);

			if( String.length(export.emailBody) > 0 ){
				body = export.emailBody;
			}
			else{
				body = I('Your export {0:name} has completed. Please find the export within the attached file(s).').expand(export.name);
			}
			body = String.replace(body, "\r\n", "\n");
			body = String.replace(body, "\r", "\n");
			body = String.replace(body, "\n", "\r\n");

			domainAddress = "" + F('export-domain-address');
			if( domainAddress == ""){
				domainAddress = "http://localhost";
			}
			body += "\n";
			exportedFiles.each() using ( exportedFile ) {
				pathArr = exportedFile.toArray("/");
				fileName = pathArr.last();
				fileURL = Config.DataDirectoryURL + 'Exports/' + fileName;
				Directory.make("/cention/webroot" + Config.DataDirectoryURL + 
					'Exports/', 0777);
				Sys.system("cp " + exportedFile + " " + "/cention/webroot" +
						fileURL);
				fileURL = domainAddress + fileURL;
				body += fileURL + "\n";
			};
			text.type  = Mail.Mime.TYPETEXT;
			text.subtype = "plain";
			text.charset = "UTF-8";
			text.content = body;

			message.content = text;
		}
		return message;
	}
}

namespace modifies Workflow {
	class modifies Format {
		function structure {
			object format = self;
			array keys = [], values = [];

			if( format.errandId )    values['errand_id'] = I('Errand ID');
			if( format.fromAddress ) values['from_address'] = I('From Address');
			if( format.toAddress )   values['to_address'] = I('To Address');
			if( format.subject )     values['subject'] = I('Errand Subject');
			if( format.question )    values['question'] = I('Question');
			if( format.answer )      values['answer'] = I('Answer');
			if( format.arrived )     values['timestamp_arrived'] = I('Arrived');
			if( format.opened )      values['timestamp_opened'] = I('Opened');
			if( format.answered )    values['timestamp_answered'] = I('Answered');
			if( format.closed )      values['timestamp_closed'] = I('Closed');
			if( format.agentid )     values['agent_id'] = I('Agent ID');
			if( format.agentname )   values['agent_name'] = I('Agent Name');
			if( format.areaid )      values['area_id'] = I('Area ID');
			if( format.areaname )    values['area_name'] = I('Area Name');
			if( format.clientid )    values['client_id'] = I('Client ID');
			if( format.priority )    values['priority'] = I('Errand Priority');
			if( format.tags )        values['tag_names'] = I('Tags');
			if( format.feedback ) 	 values['Satisfaction_meter_answer'] = I('Satisfaction meter');
			if( format.channel ) 	 values['channel'] = I('Channel');
			
			values.eachWithIndex() using ( value, index ) {
				keys[] = values.getName(index);
			};

			return [
				'active_keys' => keys,
				'translations' => values
			];
		}

		function colTranslations {
			object format = self;
			array values=[];
			values['errand_id'] = I('Errand ID');
			values['from_address'] = I('From Address');
			values['to_address'] = I('To Address');
			values['subject'] = I('Errand Subject');
			values['question'] = I('Question');
			values['answer'] = I('Answer');
			values['timestamp_arrived'] = I('Arrived');
			values['timestamp_opened'] = I('Opened');
			values['timestamp_answered'] = I('Answered');
			values['timestamp_closed'] = I('Closed');
			values['agent_id'] = I('Agent ID');
			values['agent_name'] = I('Agent Name');
			values['area_id'] = I('Area ID');
			values['area_name'] = I('Area Name');
			values['client_id'] = I('Client ID');
			values['priority'] = I('Errand Priority');
			values['tag_names'] = I('Tags');
			values['Satisfaction_meter_answer'] = I('Satisfaction meter');
			values['channel'] = I('Channel');
			return values;
		}
	}
	class modifies Export {
		function setSearchTerms( array positive, array negative ) {
			.setValue('positivesearchterms', String.base64encode(Serialize.toNative(positive)));
			.setValue('negativesearchterms', String.base64encode(Serialize.toNative(negative)));
		}
		function getPositiveSearchTerms {
			if( not .positivesearchterms ) {
				return [];
			}
			return Serialize.fromNative(String.base64decode(.positivesearchterms));
		}
		function getNegativeSearchTerms {
			if( not .negativesearchterms ) {
				return [];
			}
			return Serialize.fromNative(String.base64decode(.negativesearchterms));
		}
		function setEmailLists( array positive, array negative ) {
			.setValue('positiveEmailAddList', String.base64encode(Serialize.toNative(positive)));
			.setValue('negativeEmailAddList', String.base64encode(Serialize.toNative(negative)));
		}
		function getPositiveEmailLists {
			if( not .positivesearchterms ) {
				return [];
			}
			return Serialize.fromNative(String.base64decode(.positiveEmailAddList));
		}
		function getNegativeEmailLists {
			if( not .negativesearchterms ) {
				return [];
			}
			return Serialize.fromNative(String.base64decode(.negativeEmailAddList));
		}
		function getAvailableAreaTags() {
			array tags = [];
			.areas.each() using ( area ) {
				area.tags.each() using ( tag ) {
					tags[] = tag;
				};
			};
			return tags;
		}

		function updateProgress( object generated_export, number progress ) {
			if( generated_export.progress < progress ) {
				log(self, "Progress: $progress%");
				generated_export.setValue('progress', progress);
				generated_export.save();
			}
		}
		function rawQuery( string query, boolean exportResult ) {
			object connection = Dbi.connect('pgsql', 'postgres', '', 'localhost', 'objsrv');
			object result = connection.query(query);
			array rows = [];
			if( result ) {
				array row;
				while( row = result.nextRecord() ) {
					if( exportResult ) {
						object o = new Exports.ExportResult();
						object relf = new Object(o);
						relf.setVariables(row);
						rows[] = o;
					} else {
						rows[] = row;
					}
				}
				result.finish();
			}
			connection.disconnect();
			return rows;
		}
		function runQuery( string query, number offset, number limit ) {
			string sql = query;
			sql = Regexp.replaceAll('{limit}', sql, "$limit");
			sql = Regexp.replaceAll('{offset}', sql, "$offset");
			monitor {
				array result = .rawQuery(sql, true);
				return result;
			} handle {
				log(self, "Error running query: $sql (${err.str})");
			}
		}
		function fetchExportSize( string query ) {
			array results = .rawQuery(query, false);
			return results[0]['export_size'];
		}
		function generateSQL {
			return .generateSQL('', false);
		}
		function generateSQL( string prefix, boolean aggregate ) {
			object deleted_tag = Workflow.Tag.fetch(Workflow.Errand.TAG_DELETED);
			
			object format = self.exportFormat;
			
			array selectClause = [];
			array leftJoins = [];
			array whereClause = [];
			array collapsable;
			string services;
			
			boolean checkingErrandContents = (.getPositiveSearchTerms() or .getNegativeSearchTerms() ? true : false);
			boolean checkingFromAddress = (.getPositiveEmailLists() or .getNegativeEmailLists() ? true : false);
			
			// workflow_errands
			if( format.errandId ) selectClause[] = "errand.workflow_errand_id AS errand_id";
			if( format.arrived )  selectClause[] = "errand.timestampArrive AS _internal_timestamp_arrived";
			if( format.opened )   selectClause[] = "errand.timestampOpen AS _internal_timestamp_opened";
			if( format.answered ) selectClause[] = "errand.timestampLastAnswered AS _internal_timestamp_answered";
			if( format.closed )   selectClause[] = "errand.timestampClosed AS _internal_timestamp_closed";
			if( format.agentid )  selectClause[] = "errand.owner_fkey AS agent_id";
			if( format.areaid )   selectClause[] = "errand.targetArea_fkey AS area_id";
			if( format.clientid ) selectClause[] = "errand.client_fkey AS client_id";

			if( format.priority ) {
				selectClause[] = "priority.name AS priority";
				leftJoins['workflow_priorities AS priority'] = "errand.priority_fkey = priority.workflow_priority_id";
			}
			if( format.channel ){
				selectClause[]  = "services.name as channel";
				leftJoins['workflow_services as services'] = "errand.service_fkey = services.workflow_service_id";
			}
			
			// workflow_errand_tags_links, workflow_tags
			if( format.tags ) {
				selectClause[] = "
					(SELECT array_to_string(array_agg(display), ', ')
					 FROM workflow_tags
					 WHERE workflow_tag_id IN (
						SELECT child_workflow_tag_id
						FROM workflow_errand_tags_links
						WHERE parent_workflow_errand_id=errand.workflow_errand_id AND
							child_workflow_tag_id NOT IN (SELECT workflow_tag_id FROM workflow_tags WHERE name like 'system%'))
					) AS tag_names";
				
				/* Tobias 2012-11-06: Since one tag per column only works when there
				 * is a few tags in the system I'm disabling it until it can be fixed.
				.getAvailableAreaTags().each() using ( tag ) {
					string safe_name = Regexp.replaceAll('[^A-z0-9]', tag.display, '_').toLower();
					selectClause[] = "
						(SELECT array_to_string(array_agg(
							workflow_users.username ||
							' added ' ||
							workflow_tags.display ||
							' in ' ||
							workflow_areas.name ||
							' at ' ||
							to_char(
								(TIMESTAMP 'epoch' + (workflow_recordederrandtaggings.timestampWhen + INTEGER '${Date.timezone() * 2}') * INTERVAL '1 second'),
								'YYYY/MM/DD HH24:MI')
							), ', ')
						 FROM workflow_recordederrandtaggings
						 JOIN workflow_tags ON workflow_tag_id=workflow_recordederrandtaggings.tag_fkey
						 JOIN workflow_users ON workflow_user_id=workflow_recordederrandtaggings.user_fkey
						 JOIN workflow_areas ON workflow_area_id=workflow_recordederrandtaggings.area_fkey
						 WHERE workflow_recordederrandtaggings.type=${Workflow.RecordedErrandTagging.ADD}
						 AND workflow_recordederrandtaggings.errand_fkey=errand.workflow_errand_id
						 AND workflow_recordederrandtaggings.tag_fkey=${tag.id}
						) AS tag_${safe_name}
					";
				}; */
			}

			// workflow_mail... ish.
			if( format.toAddress ) {
				selectClause[] = "
					(SELECT array_to_string(array_agg(emailAddress), ', ') 
					 FROM workflow_mailorigins
					 WHERE workflow_mailorigin_id IN (
						SELECT child_workflow_mailorigin_id 
						FROM workflow_mail_to_links 
						WHERE parent_workflow_mail_id=errand.mail_fkey)) AS to_address
				";
			}
			if( format.fromAddress or checkingFromAddress ) {
				selectClause[] = "
					(SELECT emailAddress
					 FROM workflow_mailorigins
					 WHERE workflow_mailorigin_id IN (
						SELECT from_fkey 
						FROM workflow_mails 
						WHERE workflow_mail_id=errand.mail_fkey)) AS " + (format.fromAddress ? 'from_address' : '_internal_from_address');
			}
			
			// workflow_simplemesssges
			if( format.subject or format.question or checkingErrandContents ) {
				leftJoins['workflow_simplemessages AS question'] = "errand.message_fkey = question.workflow_simplemessage_id";
				leftJoins['workflow_mails AS mail'] = "errand.mail_fkey = mail.workflow_mail_id";
				if( format.subject )  selectClause[] = "question.subject AS subject, mail.subject AS original_subject";
				if( format.question ) selectClause[] = "question.body AS question, mail.body AS original_question";
				if( checkingErrandContents ) {
					selectClause[] = "(question.subject || ' ' || question.body || ' ' || mail.subject || ' ' || mail.body) AS _internal_errand_text";
				}
			}
			if( format.answer or checkingErrandContents ) {
				leftJoins['workflow_answers AS answer'] = "errand.answer_fkey = answer.workflow_answer_id";
				leftJoins['workflow_simplemessages AS answer_content'] = "answer.message_fkey = answer_content.workflow_simplemessage_id";
				selectClause[] = "answer_content.body AS answer";
				if( checkingErrandContents ) {
					selectClause[] = "(answer_content.subject || ' ' || answer_content.body) AS _internal_answer_text";
				}
			}

			// workflow_users
			if( format.agentname ) {
				leftJoins['workflow_users AS agent'] = "errand.owner_fkey = agent.workflow_user_id";
				selectClause[] = "(agent.username || ' (' || agent.loginname || ')') AS agent_name";
			}
			// workflow_areas
			if( format.areaname ) {
				leftJoins['workflow_areas AS area'] = "errand.targetArea_fkey = area.workflow_area_id";
				selectClause[] = "area.name AS area_name";
			}
			// workflow_feedbacks
			if( format.feedback ) {
				selectClause[] = "(SELECT count(feedback)
						FROM workflow_feedbacks where 
						errand.workflow_errand_id = workflow_feedbacks.errand_fkey and workflow_feedbacks.feedback IN (1)) AS satisfaction_meter_answer_1";
				selectClause[] = "(SELECT count(feedback)
						FROM workflow_feedbacks where 
						errand.workflow_errand_id = workflow_feedbacks.errand_fkey and workflow_feedbacks.feedback IN (2)) AS satisfaction_meter_answer_2";
				selectClause[] = "(SELECT count(feedback)
						FROM workflow_feedbacks where 
						errand.workflow_errand_id = workflow_feedbacks.errand_fkey and workflow_feedbacks.feedback IN (3)) AS satisfaction_meter_answer_3";
				selectClause[] = "(SELECT count(feedback)
						FROM workflow_feedbacks where 
						errand.workflow_errand_id = workflow_feedbacks.errand_fkey and workflow_feedbacks.feedback IN (4)) AS satisfaction_meter_answer_4";
				selectClause[] = "(SELECT count(feedback)
						FROM workflow_feedbacks where 
						errand.workflow_errand_id = workflow_feedbacks.errand_fkey and workflow_feedbacks.feedback IN (5)) AS satisfaction_meter_answer_5";
			}		 
		
			if( .start ) {
				whereClause[] = "errand.timestampArrive > ${.start}";
			}
			if( .finish ) {
				whereClause[] = "errand.timestampArrive < ${.finish}";
			}
			if( .areas ) {
				whereClause[] = "errand.targetArea_fkey IN (" + .areas.join(',') using ( area ) { return '' + area.id; } + ")";
			} else {
				whereClause[] = "errand.targetArea_fkey IN (" + Workflow.SystemGroup.areas(.systemGroup).join(',') using ( area ) { return '' + area; } + ")";
			}
		
			
			if( not .allerrandsflag ) {
				if( .positiveTagList or .negativeTagList ) {
					if( .positiveTagList ) {
						whereClause[] = "errand.workflow_errand_id IN (SELECT parent_workflow_errand_id FROM workflow_errand_tags_links WHERE child_workflow_tag_id IN (" + .positiveTagList.join(',') using ( tag ) {
							return '' + tag.id;
						} + "))";
					}
					if( .negativeTagList ) {
						whereClause[] = "errand.workflow_errand_id NOT IN (SELECT parent_workflow_errand_id FROM workflow_errand_tags_links WHERE child_workflow_tag_id IN (" + .negativeTagList.join(',') using ( tag ) {
							return '' + tag.id;
						} + "))";
					}
				}
			} else {
				whereClause[] = "errand.workflow_errand_id NOT IN (SELECT parent_workflow_errand_id FROM workflow_errand_tags_links WHERE parent_workflow_errand_id=errand.workflow_errand_id AND child_workflow_tag_id=${deleted_tag.id})";
			}

			if(self.services != ""){
				services = String.replace(self.services,"|", ",");
				services = String.postTrim(services,",");
				whereClause[] = "errand.service_fkey IN ("+services+")";
			}
			
			leftJoins.map() using ( join, condition ) {
				collapsable[] = "LEFT JOIN $join ON $condition";
			};
			
			return 
				(prefix ? prefix : "SELECT " + selectClause.join(',')) + " " +
				"FROM workflow_errands AS errand " + 
				(leftJoins
					? collapsable.join(" ") + " "
					: ' ' ) +
				(whereClause 
					? "WHERE " + whereClause.join(' AND ')
					: '') +
				(aggregate ? '' : " ORDER BY workflow_errand_id ASC OFFSET {offset} LIMIT {limit}");
		}
		function generatePreview( object format ) {
			object actual_export = Workflow.Export.load(self.id);
			array list = [];
			array columns = [], order = [];
			object original_format = actual_export.exportFormat;
			array original_areas = actual_export.areas;
			number count = 1;
			
			if(.areas){
				actual_export.setValue('areas', .areas);
			}
			actual_export.setValue('exportFormat', format);
			.runQuery(actual_export.generateSQL(), 0, 10).each() using ( row ) {
				string id = 'row-' + Date.now() + '-' + count;
				
				if( not columns ) columns = row.toOrder(format, self);
				list["$id"] = [ 'data' => row.toArray(format, self), 'id' => id ];
				order[] = id;
				count++;
			};
			actual_export.setValue('exportFormat', original_format);
			actual_export.setValue('areas', original_areas);
			return [ 'list' => list, 'order' => order, 'columns' => columns ];
		}
		function run {
			object actual_export = Workflow.Export.load(self.id);
			object generated_export = new Workflow.GeneratedExports();
			object writer = Exports.DataWriter.createForExport(actual_export);
			number export_size = 0;
			string fetch_sql = actual_export.generateSQL();
			object message = null;
			array results = [];
			number limit = 500;
			number offset = 0;
			boolean keepRunning = true;

			log(self, "Starting export '${self.name}'");
			
			export_size = .fetchExportSize(actual_export.generateSQL('SELECT COUNT(errand.workflow_errand_id) AS export_size', true));
			log(self, "Export will be a maximum of $export_size rows.");
			//log(self, "Running query: ${fetch_sql}");
			
			actual_export.setValue('exportState', Workflow.Export.STATE_RUNNING);
			actual_export.save();

			generated_export.setValue('export', actual_export);
			generated_export.setValue('start', Date.now());
			generated_export.setValue('size', export_size);
			generated_export.save();
			
			writer.setTag("version-${generated_export.id}");
			writer.start();
			do {
				boolean resultSeen = false;
				actual_export = Workflow.Export.forceLoad(actual_export.id);
				if( actual_export.exportState == Workflow.Export.STATE_STOPPED ) {
					log(self, "Remote termination of export requested. Finishing.");
					keepRunning = false;
				} else {
					// Update the progress
					.updateProgress( generated_export, (export_size > 0 ? (((offset > export_size ? export_size : offset ) / (export_size + 0.0)) * 50).round() : 50) );
					// Run the data retrival
					resultSeen = writer.record(.runQuery(fetch_sql, offset, limit));
					offset += limit;
				}
			} while( resultSeen and keepRunning );

			if( keepRunning ) {
				log(self, "Totals: recorded: ${writer.recordedCount}; duplicate rows eliminated: ${writer.duplicateCount}");
				log(self, "Finishing export to file: ${writer.finishFiles()}");
				writer.finish(actual_export, generated_export);
				log(self, "Files written - export '${actual_export.name}' complete.");
			
				message = Exports.createMessage( actual_export, writer.finishFiles() );
				if( message ) {
					object _logClosure = closure( string text ) {
						log(self, text);
					};
					log(self, "Sending export file${(writer.finishFiles().size() > 1 ? 's' : '')} to ${actual_export.optionalAddress}");
					MailUtilities.sendMessage( new Mail.Connection(), message, _logClosure );
				}

				log(self, "Recording generated report for UI.");
				generated_export.setValue('progress', 100);
				generated_export.setValue('size', writer.recordedCount);
				generated_export.setValue('finish', Date.now());
				generated_export.setValue('filename', writer.finishFiles().join(':'));
				generated_export.save();
				log(self, "Export recorded to object with id ${generated_export.id}.");

				actual_export = Workflow.Export.forceLoad(actual_export.id);
				actual_export.setValue('exportState', Workflow.Export.STATE_FINISHED);
				actual_export.save();
			} else {
				generated_export.delete();

				actual_export = Workflow.Export.forceLoad(actual_export.id);
				actual_export.setValue('exportState', Workflow.Export.STATE_IDLE);
				actual_export.save();
			}

		}
	}
}

Exports.setup();
